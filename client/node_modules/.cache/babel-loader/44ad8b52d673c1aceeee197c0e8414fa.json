{"ast":null,"code":"var _jsxFileName = \"/Users/morris754/Documents/projects/dashboard/client/src/components/Timeline.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\"; //import MyChart from \"./components/MyChart\"\n\nimport testTimeData from \"../data/testTimeData\";\n\nfunction parseData(myInput) {\n  // processes alpha vantage data into a format for viz by chart.js\n  // 1. Convert object of objects into array of objects\n  // create new key: date (originally a key in the first level of objects)\n  let newArray = [];\n\n  for (var key in myInput) {\n    if (myInput.hasOwnProperty(key)) {\n      const newRow = Object.assign({\n        \"newDate\": new Date(key)\n      }, {\n        \"Date\": key\n      }, myInput[key]);\n      newArray.push(newRow);\n    }\n  } //console.log(newArray)\n  // 2. Generate plotData for d3js\n\n\n  let newArray2 = [];\n\n  for (var i = 0; i < newArray.length; i++) {\n    let newRow = Object.assign({\n      \"date\": newArray[i][\"Date\"]\n    }, {\n      \"a\": parseFloat(newArray[i][\"4. close\"])\n    });\n    newArray2.unshift(newRow);\n  }\n\n  return newArray2;\n}\n\nclass Timeline extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ticker: \"\",\n      plotData: []\n    };\n    this.drawChart = this.drawChart.bind(this);\n  } // setState() in componentDidMount()\n\n\n  componentDidMount() {\n    console.log(\"mount\");\n    this.drawChart();\n  }\n\n  drawChart() {\n    const stockPlotData = this.state.plotData; //console.log(\"stockPlotData.length=\", stockPlotData.length)\n\n    var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", 960).attr(\"height\", 300);\n    var margin = {\n      left: 50,\n      right: 30,\n      top: 30,\n      bottom: 30\n    };\n    var width = svg.attr(\"width\") - margin.left - margin.right;\n    var height = svg.attr(\"height\") - margin.bottom - margin.top;\n    var x = d3.scaleTime().rangeRound([0, width]); //var x_axis = d3.axisBottom(x);\n\n    var y = d3.scaleLinear().rangeRound([height, 0]); //var y_axis = d3.axisBottom(y);\n\n    var parseTime = d3.timeParse(\"%Y-%m-%d\");\n    x.domain(d3.extent(stockPlotData, function (d) {\n      return parseTime(d.date);\n    }));\n    y.domain([0, d3.max(stockPlotData, function (d) {\n      return d.a;\n    })]);\n\n    var multiline = function (category) {\n      var line = d3.line().x(function (d) {\n        return x(parseTime(d.date));\n      }).y(function (d) {\n        return y(d[category]);\n      });\n      return line;\n    };\n\n    var categories = ['a']; //var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    var g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    for (let i in categories) {\n      var lineFunction = multiline(categories[i]);\n      g.append(\"path\").datum(stockPlotData).attr(\"class\", \"line\").style(\"stroke\", \"blue\") //.style(\"stroke\", color(i))\n      .style(\"fill\", \"None\").attr(\"d\", lineFunction);\n    } // Add the X Axis\n\n\n    g.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\"))); // Add the Y Axis\n\n    g.append(\"g\").call(d3.axisLeft(y));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, this.state.ticker);\n  }\n\n}\n\nexport default Timeline;","map":{"version":3,"sources":["/Users/morris754/Documents/projects/dashboard/client/src/components/Timeline.js"],"names":["React","Component","d3","testTimeData","parseData","myInput","newArray","key","hasOwnProperty","newRow","Object","assign","Date","push","newArray2","i","length","parseFloat","unshift","Timeline","constructor","state","ticker","plotData","drawChart","bind","componentDidMount","console","log","stockPlotData","svg","select","append","attr","margin","left","right","top","bottom","width","height","x","scaleTime","rangeRound","y","scaleLinear","parseTime","timeParse","domain","extent","d","date","max","a","multiline","category","line","categories","g","lineFunction","datum","style","call","axisBottom","tickFormat","timeFormat","axisLeft","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n//import MyChart from \"./components/MyChart\"\nimport testTimeData from \"../data/testTimeData\"\n\nfunction parseData(myInput) {\n  // processes alpha vantage data into a format for viz by chart.js\n\n  // 1. Convert object of objects into array of objects\n  // create new key: date (originally a key in the first level of objects)\n  let newArray = []\n  for (var key in myInput) {\n      if (myInput.hasOwnProperty(key)) {\n          const newRow = Object.assign({\"newDate\": new Date(key)}, {\"Date\": key}, myInput[key])\n          newArray.push(newRow)\n      }\n  }\n  //console.log(newArray)\n  // 2. Generate plotData for d3js\n  let newArray2 = []\n  for (var i = 0; i < newArray.length; i++) {\n    let newRow = Object.assign({\"date\": newArray[i][\"Date\"]}, {\"a\":parseFloat(newArray[i][\"4. close\"])})\n    newArray2.unshift(newRow)\n  }\n\n  return newArray2\n}\n\n\nclass Timeline extends Component {\n  constructor() {\n    super()\n    this.state = {\n      ticker:\"\", \n      plotData:[]\n    }\n    this.drawChart = this.drawChart.bind(this)\n  }\n\n  // setState() in componentDidMount()\n  componentDidMount() {\n    console.log(\"mount\")\n    this.drawChart()\n  }\n\n\n  drawChart() {\n    const stockPlotData = this.state.plotData\n    //console.log(\"stockPlotData.length=\", stockPlotData.length)\n    var svg = d3.select(\"body\").append(\"svg\")\n      .attr(\"width\", 960)\n      .attr(\"height\", 300)\n\n    var margin = {left:50, right:30, top:30, bottom: 30}\n    var width = svg.attr(\"width\") - margin.left - margin.right;\n    var height = svg.attr(\"height\") - margin.bottom - margin.top;\n\n    var x = d3.scaleTime().rangeRound([0, width]);\n    //var x_axis = d3.axisBottom(x);\n    \n    var y = d3.scaleLinear().rangeRound([height, 0]);\n    //var y_axis = d3.axisBottom(y);\n    var parseTime = d3.timeParse(\"%Y-%m-%d\");\n    \n    x.domain(d3.extent(stockPlotData, function(d) { return parseTime(d.date); }));\n    y.domain([0, \n              d3.max(stockPlotData, function(d) { \n                return d.a;\n              })]);\n    \n    var multiline = function(category) {\n      var line = d3.line()\n                  .x(function(d) { return x(parseTime(d.date)); })\n                  .y(function(d) { return y(d[category]); });\n      return line;\n    }\n    \n    var categories = ['a'];\n    //var color = d3.scaleOrdinal(d3.schemeCategory10);\n    \n    var g = svg.append(\"g\")\n        .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    \n    for (let i in categories) {\n      var lineFunction = multiline(categories[i]);\n      g.append(\"path\")\n        .datum(stockPlotData) \n        .attr(\"class\", \"line\")\n        .style(\"stroke\", \"blue\")\n        //.style(\"stroke\", color(i))\n        .style(\"fill\", \"None\")\n        .attr(\"d\", lineFunction);\n    }\n  \n    // Add the X Axis\n    g.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\")));\n  \n    // Add the Y Axis\n    g.append(\"g\")\n    .call(d3.axisLeft(y));\n  }\n\n  render(){\n    return (<div>{this.state.ticker}</div>)\n  }\n}\n\n\nexport default Timeline;"]},"metadata":{},"sourceType":"module"}